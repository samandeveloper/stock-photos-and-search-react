{"version":3,"sources":["Photo.js","App.js","index.js"],"names":["Photo","regular","urls","alt_description","likes","user","name","portfolio_url","medium","profile_image","className","src","alt","href","clientID","process","REACT_APP_ACCESS_KEY","App","useState","loading","setLoading","photos","setPhotos","page","setPage","query","setQuery","newImage","setNewimage","fetchImages","a","urlPage","urlQuery","url","console","log","fetch","response","json","data","oldPhotos","results","useEffect","oldPage","event","window","innerHeight","scrollY","document","body","scrollHeight","addEventListener","type","placeholder","value","onChange","e","target","onClick","preventDefault","map","photo","index","key","ReactDOM","render","StrictMode","getElementById"],"mappings":"6PA+BeA,EA5BD,SAAC,GASR,IARCC,EAQF,EARJC,KAAMD,QACNE,EAOI,EAPJA,gBACAC,EAMI,EANJA,MAMI,IALJC,KACEC,EAIE,EAJFA,KACAC,EAGE,EAHFA,cACgBC,EAEd,EAFFC,cAAgBD,OAGlB,OACE,6BAASE,UAAU,SAEjB,yBAAKC,IAAKV,EAASW,IAAKT,IACxB,yBAAKO,UAAU,cACb,6BACE,4BAAKJ,GACL,2BAAIF,EAAJ,WAEF,uBAAGS,KAAMN,GAEP,yBAAKI,IAAKH,EAAQE,UAAU,iBCfhCI,EAAQ,qBAAkBC,iJAAYC,sBA+G7BC,MA1Gf,WAAe,MAEeC,oBAAS,GAFxB,mBAEPC,EAFO,KAECC,EAFD,OAGaF,mBAAS,IAHtB,mBAGPG,EAHO,KAGAC,EAHA,OAISJ,mBAAS,GAJlB,mBAIPK,EAJO,KAIFC,EAJE,OAKWN,mBAAS,IALpB,mBAKPO,EALO,KAKDC,EALC,OAMiBR,oBAAS,GAN1B,mBAMPS,EANO,KAMEC,EANF,KASPC,EAAW,uCAAG,oCAAAC,EAAA,6DAClBV,GAAW,GAELW,EAHY,gBAGOR,GACnBS,EAJY,iBAISP,GAIzBQ,EADCR,EACE,UAnBM,2CAmBN,OAAkBX,GAAlB,OAA6BiB,GAA7B,OAAuCC,GAEvC,UAtBI,oCAsBJ,OAAgBlB,GAAhB,OAA2BiB,GAEhCG,QAAQC,IAAIF,GAZM,kBAcOG,MAAMH,GAdb,cAcVI,EAdU,iBAeGA,EAASC,OAfZ,QAeVC,EAfU,OAgBhBL,QAAQC,IAAII,GAEZjB,GAAU,SAACkB,GACT,OAAGf,GAAkB,IAATF,EACHgB,EAAKE,QAGN,GAAN,mBAAUD,GADTf,EACD,YAAuBc,EAAKE,SAE5B,YAAuBF,OAG3BnB,GAAW,GACXQ,GAAY,GA7BI,kDA+BhBM,QAAQC,IAAR,MA/BgB,0DAAH,qDAmCjBO,qBAAU,WACRb,MACA,CAACN,IAIHmB,qBAAU,WACRlB,GAAQ,SAACmB,GACP,OAAOA,EAAQ,OAEjB,CAAChB,IAGH,IAAMiB,EAAQ,WACTC,OAAOC,YAAYD,OAAOE,SAAWC,SAASC,KAAKC,aAAa,GACjEtB,GAAY,IA0BhB,OAtBAc,qBAAU,WACRG,OAAOM,iBAAiB,SAASP,KAEjC,IAoBA,8BACE,6BAASlC,UAAU,UACjB,0BAAMA,UAAU,eACd,2BAAO0C,KAAK,OAAOC,YAAY,SAASC,MAAO7B,EAAOf,UAAU,aAAa6C,SARhE,SAACC,GACpB,OAAO9B,EAAS8B,EAAEC,OAAOH,UAQnB,4BAAQF,KAAK,SAAS1C,UAAU,aAAagD,QArBhC,SAACF,GACpBA,EAAEG,iBACElC,IAEAA,IACFS,QAAQC,IAAI,gBACZN,KAEFL,EAAQ,MAakE,kBAAC,IAAD,SAIxE,6BAASd,UAAU,UACjB,yBAAKA,UAAU,iBACZW,EAAOuC,KAAI,SAACC,EAAMC,GACjB,OAAO,kBAAC,EAAD,eAAOC,IAAKD,GAAWD,QAGjC1C,GAAW,wBAAIT,UAAU,WAAd,iBC7GpBsD,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFlB,SAASmB,eAAe,W","file":"static/js/main.a9ebdb7d.chunk.js","sourcesContent":["//each photo on the homepage\r\nimport React from 'react'\r\n\r\nconst Photo = ({\r\n  urls:{regular},\r\n  alt_description,\r\n  likes,\r\n  user:{\r\n    name,\r\n    portfolio_url,\r\n    profile_image: {medium} //medium should be in {}\r\n  }\r\n}) => {\r\n  return(\r\n    <article className='photo'>\r\n       {/* we can just write regular not the urls below */}\r\n      <img src={regular} alt={alt_description}/>\r\n      <div className='photo-info'>\r\n        <div>\r\n          <h4>{name}</h4>\r\n          <p>{likes} likes</p>\r\n        </div>\r\n        <a href={portfolio_url}>\r\n          {/* we can just write medium not the profile_image below */}\r\n          <img src={medium} className=\"user-img\"/>\r\n        </a>\r\n      </div>\r\n    </article>\r\n  )\r\n}\r\n\r\nexport default Photo\r\n","//this project can have two states: \r\n//1. when srolling down and images uploading constantly \r\n//2. when search uses and using search gives us the images\r\n//if the search keyword is any part of the data it will show that image\r\n\r\nimport React, { useState, useEffect } from 'react'\r\nimport { FaSearch } from 'react-icons/fa'\r\nimport Photo from './Photo'\r\n\r\nconst clientID =  `?client_id=${process.env.REACT_APP_ACCESS_KEY}`;\r\n//the two url below are not the final urls\r\nconst mainUrl = `https://api.unsplash.com/photos/`\r\nconst searchUrl = `https://api.unsplash.com/search/photos/`\r\n\r\nfunction App() {\r\n  //states\r\n  const[loading,setLoading] = useState(true)\r\n  const[photos,setPhotos] = useState([])\r\n  const[page,setPage] = useState(1)  //by default we are on page one\r\n  const[query,setQuery] = useState('')  //query is for search\r\n  const[newImage,setNewimage] = useState(false)   //when scrolling to see the new images\r\n\r\n  //fetch data from api\r\n  const fetchImages = async() =>{\r\n    setLoading(true);\r\n    let url;\r\n    const urlPage = `&page=${page}`;\r\n    const urlQuery = `&query=${query}`\r\n\r\n    //if we want the link with or without search (query)\r\n    if(query){  //we have the query (search) in the link\r\n      url = `${searchUrl}${clientID}${urlPage}${urlQuery}`\r\n    }else{   //we don't have query in the link\r\n      url = `${mainUrl}${clientID}${urlPage}`\r\n    }\r\n    console.log(url)\r\n    try{\r\n      const response = await fetch(url)\r\n      const data = await response.json()\r\n      console.log(data)\r\n\r\n      setPhotos((oldPhotos)=>{\r\n        if(query && page === 1){  //query exists and we are on page one\r\n          return data.results  //results is an array of objects\r\n        }else \r\n        if(query){      //query exists and we are not on page one keep the old pages and upload new pages\r\n          return[...oldPhotos,...data.results]\r\n        }else{        //query doesn't exist--we are using mainUrl--on mainUrl we don't have result array of objects, we have data array of objects\r\n          return[...oldPhotos,...data]\r\n        }\r\n      })\r\n      setLoading(false)\r\n      setNewimage(false)\r\n    }catch(error){\r\n      console.log(error)\r\n    }\r\n  }\r\n\r\n  useEffect(()=>{\r\n    fetchImages();\r\n  },[page])   //when uploading each page we should call the fetchImage function again\r\n  \r\n\r\n  //go to the next page--this part let us to scroll and see the new images\r\n  useEffect(()=>{\r\n    setPage((oldPage)=>{\r\n      return oldPage+1\r\n    })\r\n  },[newImage])\r\n  \r\n  //function for scroll\r\n  const event = () =>{\r\n    if(window.innerHeight+window.scrollY >= document.body.scrollHeight-2){   //means if we reachs to the end of the page and -2 means we are close to the end\r\n      setNewimage(true)   //after scroll, upload the new images\r\n    }\r\n  }\r\n\r\n  useEffect(()=>{\r\n    window.addEventListener('scroll',event);\r\n    //\r\n  },[])\r\n\r\n  //handle clicking on the search icon button--note that we don't need to filter any image after search since the url that has the query do this\r\n  const handleSubmit = (e) =>{\r\n    e.preventDefault()\r\n    if(!query){   //if there is no search then do nothing\r\n      return\r\n    }if(query){\r\n      console.log(\"query exists\")\r\n      fetchImages()  //call the api function\r\n    }\r\n    setPage(1)   //we must be on page one when we click on the search icon\r\n  }\r\n\r\n  //handle on change when typing in the search input\r\n  const handleChange = (e)=>{\r\n    return setQuery(e.target.value)\r\n  }\r\n\r\n  return (\r\n    <main>\r\n      <section className='search'>\r\n        <form className='search-form'>\r\n          <input type='text' placeholder='search' value={query} className='form-input' onChange={handleChange}/>\r\n          <button type='submit' className='submit-btn' onClick={handleSubmit}><FaSearch /></button>\r\n        </form>\r\n      </section>\r\n\r\n      <section className='photos'>\r\n        <div className='photos-center'>\r\n          {photos.map((photo,index)=>{\r\n            return <Photo key={index} {...photo}/>\r\n          })}\r\n        </div>\r\n        {loading && <h2 className='loading'>Loading...</h2>}\r\n      </section>\r\n    </main>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}